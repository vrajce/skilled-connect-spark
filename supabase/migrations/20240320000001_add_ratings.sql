-- Add rating columns to providers table
ALTER TABLE providers
ADD COLUMN IF NOT EXISTS rating decimal(3,2),
ADD COLUMN IF NOT EXISTS total_ratings integer DEFAULT 0;

-- Add is_rated column to bookings table
ALTER TABLE bookings
ADD COLUMN IF NOT EXISTS is_rated boolean DEFAULT false;

-- Create provider_reviews table
CREATE TABLE IF NOT EXISTS provider_reviews (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    provider_id bigint REFERENCES providers(id) ON DELETE CASCADE,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    booking_id bigint REFERENCES bookings(id) ON DELETE CASCADE,
    rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
    review text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(booking_id)
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS idx_provider_reviews_provider_id ON provider_reviews(provider_id);
CREATE INDEX IF NOT EXISTS idx_provider_reviews_user_id ON provider_reviews(user_id);

-- Function to update provider rating
CREATE OR REPLACE FUNCTION update_provider_rating()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE providers
    SET rating = (
        SELECT AVG(rating)::decimal(3,2)
        FROM provider_reviews
        WHERE provider_id = NEW.provider_id
    ),
    total_ratings = (
        SELECT COUNT(*)
        FROM provider_reviews
        WHERE provider_id = NEW.provider_id
    )
    WHERE id = NEW.provider_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update provider rating
DROP TRIGGER IF EXISTS update_provider_rating_trigger ON provider_reviews;
CREATE TRIGGER update_provider_rating_trigger
AFTER INSERT OR UPDATE OR DELETE ON provider_reviews
FOR EACH ROW
EXECUTE FUNCTION update_provider_rating(); 