-- Create bookings table
CREATE TABLE bookings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    provider_id bigint REFERENCES providers(id) ON DELETE CASCADE,
    client_name text NOT NULL,
    service_title text NOT NULL,
    booking_date date NOT NULL,
    booking_time text NOT NULL,
    status text NOT NULL DEFAULT 'pending',
    amount decimal(10,2) NOT NULL DEFAULT 0.0,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT valid_status CHECK (status IN ('pending', 'confirmed', 'completed', 'cancelled'))
);

-- Add indexes for better query performance
CREATE INDEX idx_bookings_provider_id ON bookings(provider_id);
CREATE INDEX idx_bookings_status ON bookings(status);
CREATE INDEX idx_bookings_date ON bookings(booking_date);

-- Create updated_at trigger
CREATE TRIGGER update_bookings_updated_at
    BEFORE UPDATE ON bookings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Enable read for provider"
ON bookings FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM providers 
        WHERE providers.id = bookings.provider_id 
        AND providers.user_id = auth.uid()
    )
);

CREATE POLICY "Enable read for client"
ON bookings FOR SELECT
TO authenticated
USING (
    auth.uid()::text = client_id::text
);

CREATE POLICY "Enable insert for authenticated users"
ON bookings FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable update for provider"
ON bookings FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM providers 
        WHERE providers.id = bookings.provider_id 
        AND providers.user_id = auth.uid()
    )
);

-- Grant permissions
GRANT ALL ON bookings TO authenticated;
GRANT USAGE ON SEQUENCE bookings_id_seq TO authenticated;
