-- Update providers table with new fields
ALTER TABLE providers
ADD COLUMN IF NOT EXISTS location text,
ADD COLUMN IF NOT EXISTS languages text[] DEFAULT '{}',
ADD COLUMN IF NOT EXISTS certifications jsonb DEFAULT '[]',
ADD COLUMN IF NOT EXISTS faq jsonb DEFAULT '[]',
ADD COLUMN IF NOT EXISTS total_bookings integer DEFAULT 0,
ADD COLUMN IF NOT EXISTS rating decimal(3,2) DEFAULT 0.0;

-- Create RLS policies
ALTER TABLE providers ENABLE ROW LEVEL SECURITY;

-- Allow anyone to read approved providers
CREATE POLICY "Anyone can view approved providers"
ON providers FOR SELECT
USING (status = 'approved');

-- Allow authenticated users to create their own provider profile
CREATE POLICY "Users can create their own provider profile"
ON providers FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Allow providers to update their own profile
CREATE POLICY "Providers can update their own profile"
ON providers FOR UPDATE
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Create services table
CREATE TABLE IF NOT EXISTS provider_services (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    provider_id bigint REFERENCES providers(id) ON DELETE CASCADE,
    title text NOT NULL,
    description text,
    price decimal(10,2) NOT NULL,
    duration text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable RLS on services
ALTER TABLE provider_services ENABLE ROW LEVEL SECURITY;

-- Allow anyone to view services of approved providers
CREATE POLICY "Anyone can view services of approved providers"
ON provider_services FOR SELECT
USING (
    EXISTS (
        SELECT 1 FROM providers
        WHERE providers.id = provider_services.provider_id
        AND providers.status = 'approved'
    )
);

-- Allow providers to manage their own services
CREATE POLICY "Providers can manage their own services"
ON provider_services FOR ALL
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM providers
        WHERE providers.id = provider_services.provider_id
        AND providers.user_id = auth.uid()
    )
);
